package com.example.grade.c_service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.stereotype.Service;

import com.example.grade.a_entity.Grade;
import com.example.grade.b_repository.GradeRepository;
import com.example.grade.e_exceptions.GradeAlreadyExistsException;
import com.example.grade.e_exceptions.GradeNotFoundException;

@Service
public class GradeServiceImpl implements GradeService {
    
    @Autowired
    private GradeRepository gradeRepository;

    @Override
    public List<Grade> listAllGrades() {
        return gradeRepository.findAll();
    }

    @Override
    public Grade getGradeByGid(Long gradeId) {
        Grade grade = gradeRepository.findById(gradeId).orElse(null);
        if(grade == null) {
            throw new GradeNotFoundException(gradeId);
        }
        return grade;
    }

    public Grade addGrade(Grade grade) { // this takes eId and marks
        /* Grade input - Grade(gId, eId, Marks) */
        try {
            Long marks = grade.getMarks();
            String letterGrade = calculateLetterGrade(marks);
            Grade newGradeEntity = new Grade(grade.getEnrollmentId(), marks, letterGrade); //gId should be auto generated by database
            return gradeRepository.save(newGradeEntity);

        } catch (DataIntegrityViolationException e) {
            if(grade.getLetterGrade() == null || grade.getEnrollmentId() == null) {
                throw new IllegalArgumentException("Grade and/or Enrollment Id cannot be null");
            } else {
                throw new GradeAlreadyExistsException(grade.getEnrollmentId()); // modified to take eId as @Param
            }
        }
    }

    public Grade updateGrade(Long gradeId, Grade newGradeDetails) {
        /* updaing eid should not be allowed
         * TODO - fix logic 
         * 
         * TODO 
         *  [] Check if eId is valid or not - use feign client for this
         */

        Grade updatedGrade = getGradeByGid(gradeId); // throws GNFE
        updatedGrade.setEnrollmentId(newGradeDetails.getEnrollmentId());
        updatedGrade.setLetterGrade(newGradeDetails.getLetterGrade());

        return gradeRepository.save(updatedGrade);
    }

    public void deleteGrade(Long gradeId) {
        Grade grade = getGradeByGid(gradeId); // throws GNFE
        gradeRepository.delete(grade);
    }

    public String calculateLetterGrade(Long marks) {
        if (marks >= 91 && marks <= 100) {
            return "A*";
        } else if (marks >= 81 && marks <= 90) {
            return "A";
        } else if (marks >= 71 && marks <= 80) {
            return "B";
        } else if (marks >= 61 && marks <= 70) {
            return "C";
        } else if (marks >= 51 && marks <= 60) {
            return "D";
        } else {
            return "U";
        }
    }
    
}
